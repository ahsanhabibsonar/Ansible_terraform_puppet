#create_single_vm.yml
---
- name: Delete openstack keypairs  
  openstack.cloud.keypair:
      cloud: "{{ lookup('env', 'OS_CLOUD') }}"
      state: absent
      name: "{{ item }}"
  loop:
    -  ansible_key
    -   new_key
  ignore_errors: true # Optional: Ignore errors if the key does not exist
      
- name: Generate ed25519 SSH key if does not exist
  community.crypto.openssh_keypair:
    path: /home/ubuntu/.ssh/id_ed25519
    type: ed25519
    state: present

- name: Upload the SSH key to OpenStack
  openstack.cloud.keypair:
    cloud: "{{ lookup('env', 'OS_CLOUD') }}" #Pull from environment variable
    state: present
    name: ansible_key
      #public_key_file: /home/ubuntu/.ssh/id_rsa.pub
    public_key_file: /home/ubuntu/.ssh/id_ed25519.pub

- name: Initialize Terraform
  ansible.builtin.command: terraform init
  args:
    chdir: ~/Ansible_terraform_puppet/cloud-deployment/openstack/single_vm

- name: Destroy Terraform configuration
  ansible.builtin.command: terraform destroy --auto-approve
  args:
    chdir: ~/Ansible_terraform_puppet/cloud-deployment/openstack/single_vm

- name: Wait for 5 seconds after terraform destrution
  ansible.builtin.pause:
    seconds: 5
  when: not ansible_check_mode

- name: Apply Terraform configuration
  ansible.builtin.command: terraform apply --auto-approve
  args:
    chdir: ~/Ansible_terraform_puppet/cloud-deployment/openstack/single_vm

- name: Get instace IP address
  ansible.builtin.command: terraform output -raw instance_ip_address
  args:
    chdir: ~/Ansible_terraform_puppet/cloud-deployment/openstack/single_vm
  register: ipv4_address

- name: Define the dynamic host
  ansible.builtin.add_host:
    name: "{{ ipv4_address.stdout }}"
    groups: dynamic_host
    dynamic_host_ip: "{{ ipv4_address.stdout }}" # varibale to be available inside dynamic_host

- name: Fail if no instance IP is found
  ansible.builtin.fail:
    msg: Instance IP address is empty. Terraform output may have failed
  when: ipv4_address.stdout == ""

- name: Wait for SSH to become available
  ansible.builtin.wait_for:
    host: "{{ ipv4_address.stdout }}"
    port: 22
    delay: 10
    timeout: 120

- name: Wait for system to be fully booted and ready for SSH
  ansible.builtin.wait_for:
    path: /var/run/nologin
    state: absent
    delay: 10
    timeout: 600
